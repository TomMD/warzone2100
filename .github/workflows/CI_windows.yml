name: Windows

on: [push, pull_request]

jobs:
  windows-latest-x86:
    strategy:
      matrix:
        compiler: ["msvc_2019"]
        architecture: ["x86", "x64"]
    env:
      WZ_MSVC_VER: ${{ matrix.compiler }}
      WZ_TARGET_ARCH: ${{ matrix.architecture }}
    name: :${{ matrix.compiler }} (CMake) [${{ matrix.architecture }}]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # - name: Prepare Git Repo for autorevision
    #   run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    # - name: Init Git Submodules
    #   run: git submodule update --init --recursive
    # - name: Install Prereqs
    #   run: |
    #     gem install asciidoctor -v 2.0.10 --no-document
    # - name: Run vswhere.exe
    #   run: |
    #     call "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -requires Microsoft.Component.MSBuild -version [16.0,17.0) -latest
    - name: Download & Install Qt
      run: |
        # # Get the installation path to VS, and import the VC environment
        # $installationPath = vswhere.exe -prerelease -latest -property installationPath
        # if ($installationPath -and (test-path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
        #   & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -no_logo && set" | foreach-object {
        #     $name, $value = $_ -split '=', 2
        #     set-content env:\"$name" $value
        #   }
        # }
        # & "signtool.exe" verify /pa /v "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" | Tee-Object -Variable signtool_result
        #$signtool_result = & "signtool.exe" verify /pa /v "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        #Write-Host "signtool_result: $signtool_result"
        
        # See: https://stackoverflow.com/a/49859001
        Start-Sleep -Milliseconds 1
        
        . ".ci\powershell\request.ps1"
        
        $QT_DL_URL = "https://download.qt.io/official_releases/online_installers/qt-unified-windows-x86-online.exe"
        $url = Get-RedirectedUrl "$QT_DL_URL"
        Write-Host "Redirected Url: `"$url`""
        $req = Req -Params @{ 'Method'='GET';'Uri'="$url";'OutFile'='qt-unified-windows-x86-online.exe' } -Retries 3 -SecondsDelay 10
        
        $signature = Get-AuthenticodeSignature -LiteralPath "qt-unified-windows-x86-online.exe"
        if ($signature.Status -ne "Valid")
        {
          # Failed to valid file signature
          Throw "The file's signature is invalid"
        }
        Write-Host "Authenticode Signature: Valid"
        $dnDict = ($signature.SignerCertificate.Subject -split ', ') |
                 foreach `
                     { $dnDict = @{} } `
                     { $item = $_.Split('='); $dnDict[$item[0]] = $item[1] } `
                     { $dnDict }
        $signer_common_name = $dnDict['CN'] #$signature.SignerCertificate.subject.split(',')[0].split('=')[1]
        Write-Host "Authenticode Signature SignerCertificate.Subject: $($dnDict | Out-String)"
        if ($signer_common_name -ne "The Qt Company Oy")
        {
          # Unexpected signing common name
          throw "The file's signature has an unexpected common name: `"$signer_common_name`""
        }
        Write-Host "SignerCertificate.Subject is as expected"
        
        # Try to run the Qt installer, passing the unattended installation script
        try {
          Start-Process ".\qt-unified-windows-x86-online.exe" -ArgumentList "--verbose","--script",".ci/install_scripts/qt-install.qs","QTCI_OUTPUT=`"${env:HOME}/Qt`"","QTCI_PACKAGES=qt.qt5.599.win32_msvc2015,qt.qt5.599.qtscript" -Wait
        } catch {
            # Catch will pick up any non zero error code returned
            # You can do anything you like in this block to deal with the error, examples below:
            # $_ returns the error details
            # This will just write the error
            Write-Error "qt-unified-windows-x86-online.exe" returned the following error $_"
            # If you want to pass the error upwards as a system error and abort your powershell script or function
            Throw "Aborted qt-unified-windows-x86-online.exe" returned $_"
        }
        Write-Host "Qt installer seems to have completed..."
        & "${env:HOME}\Qt\5.9.9\msvc2015\bin\qmake" -version
    - name: Install Qt
      run: |
        echo "Gotta install Qt..."

