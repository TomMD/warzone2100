cmake_minimum_required(VERSION 3.3)
cmake_policy(SET CMP0054 NEW)

execute_process(COMMAND ${CMAKE_COMMAND} -E echo "+Executing CPackConfigVersion.cmake")
execute_process(COMMAND ${CMAKE_COMMAND} -E echo "++Running for: CPACK_GENERATOR: ${CPACK_GENERATOR}")

set(_STANDARD_CPACK_SOURCE_GENERATORS 7Z TGZ TXZ STGZ TBZ2 TZ ZIP CygwinSource)

# Get the version info from autorevision
if(("${CPACK_GENERATOR}" IN_LIST CPACK_SOURCE_GENERATOR) OR ("${CPACK_GENERATOR}" IN_LIST _STANDARD_CPACK_SOURCE_GENERATORS))
	# Currently, there is nothing to be set based on the version # for the source package in this CPack config stage
	# (The autorevision.cache for the packaged source must be generated as part of the CPack Install Script stage)
	return()

	# If in the future something needs to be set on the source package based on the version #,
	# the method to retrieve the appropriate version for the source follows:

#	# When packaging source, use the source autorevision.cache (if revision info cannot be obtained from Git)
#	set(CACHEFILE "@PROJECT_SOURCE_DIR@/src/autorevision.cache")
#
#	execute_process(COMMAND ${CMAKE_COMMAND} -E echo "++Get source revision info (cache: ${CACHEFILE})")
#
#	# Attempt to get version information from the Git repo, but fall back to the in-source autorevision cache if needed
#	execute_process(COMMAND ${CMAKE_COMMAND} -DCACHEFILE=${CACHEFILE} -DSKIPUPDATECACHE="1" -DVAROUT=1 -P "@PROJECT_SOURCE_DIR@/build_tools/autorevision.cmake"
#	WORKING_DIRECTORY "@PROJECT_SOURCE_DIR@"
#	OUTPUT_VARIABLE autorevision_info
#	OUTPUT_STRIP_TRAILING_WHITESPACE
#	)
else()
	# When packaging build products, force-use the autorevision.cache generated by the current *build*
	set(CACHEFILE "@CMAKE_BINARY_DIR@/src/autorevision.cache")

	execute_process(COMMAND ${CMAKE_COMMAND} -E echo "++Get build revision info from: ${CACHEFILE}")

	# Attempt to get version information from the current build's autorevision cache. Fail if cache is not present.
	execute_process(COMMAND ${CMAKE_COMMAND} -DCACHEFILE=${CACHEFILE} -DSKIPUPDATECACHE="1" -DCACHEFORCE="1" -DVAROUT=1 -P "@PROJECT_SOURCE_DIR@/build_tools/autorevision.cmake"
	WORKING_DIRECTORY "@PROJECT_SOURCE_DIR@"
	OUTPUT_VARIABLE autorevision_info
	OUTPUT_STRIP_TRAILING_WHITESPACE
)
endif()

# Import the autorevision values into the environment
STRING(REGEX REPLACE "\n" ";" autorevision_info "${autorevision_info}")
foreach(_varoutLine ${autorevision_info})
	STRING(REGEX MATCH "^-- ([^=]+)=(.*)" _line_Matched "${_varoutLine}")
	if(DEFINED CMAKE_MATCH_1 AND NOT "${CMAKE_MATCH_1}" STREQUAL "")
		if(DEFINED CMAKE_MATCH_2)
			set(${CMAKE_MATCH_1} "${CMAKE_MATCH_2}")
		else()
			set(${CMAKE_MATCH_1} "")
		endif()
	endif()
endforeach()

function(extractVersionNumberFromGitTag _gitTag)
	set(version_tag ${_gitTag})

	# Remove "v/" or "v" prefix (as in "v3.2.2"), if present
	STRING(REGEX REPLACE "^v/" "" version_tag "${version_tag}")
	STRING(REGEX REPLACE "^v" "" version_tag "${version_tag}")

	# Remove _beta* or _rc* suffix, if present
	STRING(REGEX REPLACE "_beta.*$" "" version_tag "${version_tag}")
	STRING(REGEX REPLACE "_rc.*$" "" version_tag "${version_tag}")

	# Extract up to a 3-component version # from the beginning of the tag (i.e. 3.2.2)
	STRING(REGEX MATCH "^([0-9]+)(.[0-9]+)?(.[0-9]+)?" version_tag "${version_tag}")

	set(DID_EXTRACT_VERSION OFF PARENT_SCOPE)
	unset(EXTRACTED_VERSION PARENT_SCOPE)
	unset(EXTRACTED_VERSION_MAJOR PARENT_SCOPE)
	unset(EXTRACTED_VERSION_MINOR PARENT_SCOPE)
	unset(EXTRACTED_VERSION_PATCH PARENT_SCOPE)

	if(version_tag)
		set(DID_EXTRACT_VERSION ON PARENT_SCOPE)
		set(EXTRACTED_VERSION ${version_tag} PARENT_SCOPE)
		if(DEFINED CMAKE_MATCH_1)
			set(EXTRACTED_VERSION_MAJOR "${CMAKE_MATCH_1}" PARENT_SCOPE)
		endif()
		if(DEFINED CMAKE_MATCH_2)
			string(SUBSTRING "${CMAKE_MATCH_2}" 1 -1 _version_minor) # remove the first "." character
			set(EXTRACTED_VERSION_MINOR "${_version_minor}" PARENT_SCOPE)
		endif()
		if(DEFINED CMAKE_MATCH_3)
			string(SUBSTRING "${CMAKE_MATCH_3}" 1 -1 _version_patch) # remove the first "." character
			set(EXTRACTED_VERSION_PATCH "${_version_patch}" PARENT_SCOPE)
		endif()
	endif()
endfunction()

macro(getVersionString)
	if(DEFINED VCS_TAG AND NOT "${VCS_TAG}" STREQUAL "")
		# Use the Tag
		set(VERSION_STRING "${VCS_TAG}")
	elseif(DEFINED VCS_BRANCH AND NOT "${VCS_BRANCH}" STREQUAL "")
		# Use the branch
		set(VERSION_STRING "${VCS_BRANCH}")
	elseif(DEFINED VCS_EXTRA AND NOT "${VCS_EXTRA}" STREQUAL "")
		# Use VCS_EXTRA
		set(VERSION_STRING "${VCS_EXTRA}")
	else()
		set(VERSION_STRING "unknown")
	endif()
endmacro()

# Extract a proper version number from the git tag
extractVersionNumberFromGitTag("${VCS_MOST_RECENT_TAGGED_VERSION}")

if(DID_EXTRACT_VERSION)
	set(CPACK_PACKAGE_VERSION		"${EXTRACTED_VERSION}")
	set(CPACK_PACKAGE_VERSION_MAJOR	"${EXTRACTED_VERSION_MAJOR}")
	set(CPACK_PACKAGE_VERSION_MINOR "${EXTRACTED_VERSION_MINOR}")
	set(CPACK_PACKAGE_VERSION_PATCH "${EXTRACTED_VERSION_PATCH}")
else()
	# Failed to extract version from autorevision info/cache
	message( WARNING "The VCS_MOST_RECENT_TAGGED_VERSION tag does not seem to include a version #; defaulting to 0.0.0" )
	set(CPACK_PACKAGE_VERSION		"0.0.0")
	set(CPACK_PACKAGE_VERSION_MAJOR	"0")
	set(CPACK_PACKAGE_VERSION_MINOR "0")
	set(CPACK_PACKAGE_VERSION_PATCH "0")
endif()

execute_process(COMMAND ${CMAKE_COMMAND} -E echo "++Setting CPACK_PACKAGE_VERSION: ${CPACK_PACKAGE_VERSION}")

if(CPACK_GENERATOR MATCHES "NSIS")
	# For the NSIS installer

	# Compute the installer version #
	set(INSTALLER_VERSION "${CPACK_PACKAGE_VERSION}.0" CACHE STRING "NSIS version")

	# Compute the version string (ex. "3.2.3" if an exact version tag, "master" if a master branch nightly build)
	getVersionString()
	message( STATUS "Version String: \"${VERSION_STRING}\"" )
	set(PACKAGE_VERSION "${VERSION_STRING}")

	execute_process(COMMAND ${CMAKE_COMMAND} -E echo "++Setting NSIS PACKAGE_VERSION: ${PACKAGE_VERSION}")

	# Output the NSIS.version.nsh defines (so the installer script picks them up)
	configure_file(
		@CMAKE_CURRENT_SOURCE_DIR@/nsis/NSIS.version.in
		@CMAKE_BINARY_DIR@/NSIS.version.nsh
	)

endif()
