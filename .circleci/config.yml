# Warzone 2100 CircleCI 2.0 configuration file
#
version: 2
jobs:

  # Build for Ubuntu 18.04 (CMake) (Clang)
  ubuntu_18_04_build:
    docker:
      - image: ubuntu:18.04
        command: ["/bin/sh"]

    steps:
      - run:
          name: Install essential packages
          command: |
            apt-get update && apt-get install -y git ssh tar gzip ca-certificates curl

      - run:
          name: Install WZ Prereqs
          command: |
            apt-get -u update
            DEBIAN_FRONTEND=noninteractive apt-get -y install clang ninja-build pkg-config libpng-dev libsdl2-dev libopenal-dev libphysfs-dev libvorbis-dev libtheora-dev libglew-dev libxrandr-dev zip unzip qtscript5-dev qt5-default libfribidi-dev libfreetype6-dev libharfbuzz-dev libfontconfig1-dev docbook-xsl xsltproc asciidoc gettext git cmake sudo

      - checkout

      # Init Git Submodules
      - run:
          name: Pull Submodules
          command: git submodule update --init --recursive

      - run:
          name: Build WZ with Clang
          command: |
            export MAKEFLAGS="-j$((`grep -c ^processor /proc/cpuinfo`))"
            cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
            cmake --build build -- -j 2
          environment:
            CC: /usr/bin/clang
            CXX: /usr/bin/clang++

  # Package source (Ubuntu 18.04, CMake) [GCC]
  package_source:
    docker:
      - image: ubuntu:18.04
        command: ["/bin/sh"]

    steps:
      - run:
          name: Install essential packages
          command: |
            apt-get update && apt-get install -y git ssh tar gzip ca-certificates curl

      - run:
          name: Install WZ Prereqs
          command: |
            apt-get -u update
            DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential clang ninja-build pkg-config libpng-dev libsdl2-dev libopenal-dev libphysfs-dev libvorbis-dev libtheora-dev libglew-dev libxrandr-dev zip unzip qtscript5-dev qt5-default libfribidi-dev libfreetype6-dev libharfbuzz-dev libfontconfig1-dev docbook-xsl xsltproc asciidoc gettext git cmake sudo

      - checkout

      # Init Git Submodules
      - run:
          name: Pull Submodules
          command: git submodule update --init --recursive

      - run:
          name: Package Source
          command: |
            export MAKEFLAGS="-j$((`grep -c ^processor /proc/cpuinfo`))"
            cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=Debug -G"Ninja"
            cmake --build build --target package_source
            # Extract the .tar.xz into a new location
            mkdir extracted && tar -xf build/warzone2100.tar.xz -C extracted

      - run:
          name: Build from Packaged Source (CMake)
          command: |
            cd extracted/warzone2100
            echo $(pwd)
            echo "--- src/autorevision.cache ---"
            cat src/autorevision.cache
            echo "--- src/autorevision.cache ---"
            cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
            cmake --build build -- -j 2

      - run:
          name: Prepare Source Tarball for Deployment
          command: |
            echo $(pwd)
            source build_tools/ci/circleci/export_build_output_desc.sh
            echo ${WZ_BUILD_DESC_PREFIX}
            build_tools/ci/travis/packaged_source_deploy_prepare.sh "build/warzone2100.tar.xz" "${WZ_BUILD_DESC_PREFIX}-" "/tmp/wz_upload"

      # Collect and save build artifacts
      - store_artifacts:
          path: /tmp/wz_upload
          #destination: packaged_source_results

  # Build for Fedora :LATEST (CMake) (GCC)
  fedora_latest_build:
    docker:
      - image: fedora:latest
        command: ["/bin/sh"]

    steps:
      - run:
          name: Install essential packages
          command: |
            dnf -y update && dnf clean all && dnf -y install git openssh-server tar gzip ca-certificates curl

      - run:
          name: Install WZ Prereqs
          command: |
            # dnf -y update && dnf clean all
            dnf -y install git gcc gcc-c++ cmake ninja-build p7zip gettext rubygem-asciidoctor
            dnf -y install qt5-qtbase-devel qt5-qtscript-devel libpng-devel SDL2-devel openal-soft-devel physfs-devel libvorbis-devel libtheora-devel glew-devel freetype-devel harfbuzz-devel && dnf clean all

      - checkout

      # Init Git Submodules
      - run:
          name: Pull Submodules
          command: git submodule update --init --recursive

      - run:
          name: Build WZ with GCC
          command: |
            export MAKEFLAGS="-j$((`grep -c ^processor /proc/cpuinfo`))"
            cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
            cmake --build build -- -j 2

  # macOS build (Xcode 9.4.1)
  macos_xcode_9_4_1_build:

    # Specify the Xcode version to use
    macos:
      xcode: "9.4.1"

    environment:
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - checkout

      # Init Git Submodules
      - run:
          name: Pull Submodules
          command: git submodule update --init --recursive

      # Install Prereqs
      - run:
          name: Install Prereqs
          command: |
            brew install cmake
            brew install gettext
            gem install asciidoctor -v 1.5.8 --no-document
            brew install gcc@7
            bundle install --gemfile="macosx/BuildBot/Gemfile"

      # Build
      - run:
          name: Build Warzone
          command: |
            source build_tools/ci/circleci/export_build_output_desc.sh
            macosx/BuildBot/travis_cmake_build.sh "${WZ_BUILD_DESC_PREFIX}-" "tmp/wz_upload"

      # Collect and save build artifacts
      - store_artifacts:
          path: tmp/wz_upload
          destination: macos_build_results

workflows:
  version: 2
  all_builds:
    jobs:
      - ubuntu_18_04_build:
          filters:
            tags:
              only: /.*/
      - package_source:
          filters:
            tags:
              only: /.*/
      - fedora_latest_build:
          filters:
            tags:
              only: /.*/
      - macos_xcode_9_4_1_build:
          filters:
            tags:
              only: /.*/
