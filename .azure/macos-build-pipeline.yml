# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger:
- test-azure

pool:
  vmImage: 'macOS-10.14'

variables:
  MACOSX_DEPLOYMENT_TARGET: 10.10

steps:
- checkout: self
  submodules: recursive
  path: 'src'
  persistCredentials: false
- task: CmdLine@2
  displayName: Install pre-reqs
  inputs:
    script: |
      brew install gettext
      # NOTE: Specify an explicit Asciidoctor version to help ensure reproducible builds
      gem install asciidoctor -v 2.0.10 --no-document
      cmake --version
- task: CmdLine@2
  displayName: configure_mac.cmake
  inputs:
    script: |
      echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}"
      echo "BUILD_DEFINITIONNAME=${BUILD_DEFINITIONNAME}"
      echo "AGENT_BUILDDIRECTORY=${AGENT_BUILDDIRECTORY}"

      cd "${AGENT_BUILDDIRECTORY}"
      
      # Set default Xcode for configure script to Xcode 10.3 on macOS 10.14
      sudo xcode-select -switch /Applications/Xcode_10.3.app
      
      # Delete any prior build dir, create a fresh one
      rm -rf build
      if [ ! -d "build" ]; then
      	mkdir build
      fi
      
      # configure_mac.cmake (gets dependencies, configures CMake)
      cd build
      WZ_DISTRIBUTOR="UNKNOWN"
      if [ "${BUILD_DEFINITIONNAME}" == "Warzone2100.warzone2100" ]; then
      	# Building from main repo - set distributor
      	WZ_DISTRIBUTOR="wz2100.net"
      fi
      # echo "cmake -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING=\"${WZ_DISTRIBUTOR}\" -DADDITIONAL_CMAKE_ARGUMENTS=\"-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=\\\"\\\";-DCODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO\" -P ../configure_mac.cmake"
      echo "Current directory: $(pwd)"
      cmake -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING="${WZ_DISTRIBUTOR}" -DADDITIONAL_CMAKE_ARGUMENTS="-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=\"\";-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO" -P ../src/configure_mac.cmake
      result=${?}
      if [ $result -ne 0 ]; then
      	echo "ERROR: configure_mac.cmake failed"
      	exit ${result}
      fi
      cd - > /dev/null
    failOnStderr: false
- task: Xcode@5
  displayName: Build Xcode project
  inputs:
    actions: 'build'
    configuration: 'Release'
    sdk: 'macosx'
    xcWorkspacePath: '$(Pipeline.Workspace)/build/warzone2100.xcodeproj'
    scheme: 'package'
    packageApp: false
- task: CmdLine@2
  displayName: Output build info
  inputs:
    script: |
      cd "${AGENT_BUILDDIRECTORY}"
      
      # Verify "warzone2100.zip" was created
      BUILT_WARZONE_ZIP="build/warzone2100.zip"
      if [ ! -f "${BUILT_WARZONE_ZIP}" ]; then
        echo "ERROR: Something went wrong, and \"${BUILT_WARZONE_ZIP}\" does not exist"
        exit 1
      fi
      # Extract & verify the .zip contents
      TMP_PKG_EXTRACT_DIR="build/tmp/_wzextract"
      rm -rf "${TMP_PKG_EXTRACT_DIR}"
      if [ ! -d "${TMP_PKG_EXTRACT_DIR}" ]; then
        mkdir -p "${TMP_PKG_EXTRACT_DIR}"
      fi
      unzip -qq "${BUILT_WARZONE_ZIP}" -d "${TMP_PKG_EXTRACT_DIR}"
      cd "${TMP_PKG_EXTRACT_DIR}"
      if [ ! -d "Warzone 2100.app" ]; then
        echo "ERROR: \"Warzone 2100.app\" was not extracted from \"${BUILT_WARZONE_ZIP}\""
        exit 1
      fi
      # For debugging purposes, output some information about the generated "Warzone 2100.app" (inside the .zip)
      echo "Generated \"Warzone 2100.app\""
      generated_infoplist_location="Warzone 2100.app/Contents/Info.plist"
      generated_versionnumber=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${generated_infoplist_location}")
      echo "  -> Version Number (CFBundleShortVersionString): ${generated_versionnumber}"
      generated_buildnumber=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${generated_infoplist_location}")
      echo "  -> Build Number (CFBundleVersion): ${generated_buildnumber}"
      generated_minimumsystemversion=$(/usr/libexec/PlistBuddy -c "Print LSMinimumSystemVersion" "${generated_infoplist_location}")
      echo "  -> Minimum macOS (LSMinimumSystemVersion): ${generated_minimumsystemversion}"
      codesign_verify_result=$(codesign --verify --deep --strict --verbose=2 "Warzone 2100.app" 2>&1)
      echo "  -> codesign --verify --deep --strict --verbose=2 \"Warzone 2100.app\""
      if [ -n "${codesign_verify_result}" ]; then
        while read -r line; do
          echo "     $line"
        done <<< "$codesign_verify_result"
      else
        echo "     (No output?)"
      fi
      cd - > /dev/null
      
      echo "Generated warzone2100.zip: \"${BUILT_WARZONE_ZIP}\""
      ZIP_HASH="$(shasum -a 512 "${BUILT_WARZONE_ZIP}")"
      ZIP_SIZE="$(stat -f '%z' "${BUILT_WARZONE_ZIP}")"
      echo "  -> SHA512: ${ZIP_HASH}"
      echo "  -> Size (bytes): ${ZIP_SIZE}"
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)/build/warzone2100.zip'
    artifact: 'warzone2100_macOS.zip'
    publishLocation: 'pipeline'
