# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger:
- test-azure

pool:
  vmImage: 'macOS-10.14'

variables:
  MACOSX_DEPLOYMENT_TARGET: 10.10

steps:
- checkout: self
  submodules: recursive
  path: 'src'
  persistCredentials: false
- task: CmdLine@2
  displayName: Install pre-reqs
  inputs:
    script: |
      brew install gettext
      # NOTE: Specify an explicit Asciidoctor version to help ensure reproducible builds
      gem install asciidoctor -v 2.0.10 --no-document
      cmake --version
- task: CmdLine@2
  displayName: configure_mac.cmake
  inputs:
    script: |
      echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}"
      echo "BUILD_DEFINITIONNAME=${BUILD_DEFINITIONNAME}"
      echo "AGENT_BUILDDIRECTORY=${AGENT_BUILDDIRECTORY}"

      # Set default Xcode for configure script to Xcode 10.3 on macOS 10.14
      sudo xcode-select -switch /Applications/Xcode_10.3.app
      
      # Delete any prior build dir, create a fresh one
      rm -rf build
      if [ ! -d "build" ]; then
      	mkdir build
      fi
      
      # configure_mac.cmake (gets dependencies, configures CMake)
      cd build
      WZ_DISTRIBUTOR="UNKNOWN"
      if [ "${BUILD_DEFINITIONNAME}" == "Warzone2100.warzone2100" ]; then
      	# Building from main repo - set distributor
      	WZ_DISTRIBUTOR="wz2100.net"
      fi
      # echo "cmake -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING=\"${WZ_DISTRIBUTOR}\" -DADDITIONAL_CMAKE_ARGUMENTS=\"-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=\\\"\\\";-DCODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO\" -P ../configure_mac.cmake"
      echo "Current directory: $(pwd)"
      cmake -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING="${WZ_DISTRIBUTOR}" -DADDITIONAL_CMAKE_ARGUMENTS="-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=\"\";-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO" -P ../src/configure_mac.cmake
      result=${?}
      if [ $result -ne 0 ]; then
      	echo "ERROR: configure_mac.cmake failed"
      	exit ${result}
      fi
      cd - > /dev/null
    failOnStderr: true
- task: Xcode@5
  displayName: Build Xcode project
  inputs:
    actions: 'build'
    configuration: 'Release'
    sdk: 'macosx'
    xcWorkspacePath: 'build/warzone2100.xcodeproj'
    scheme: 'warzone2100'
    packageApp: false
